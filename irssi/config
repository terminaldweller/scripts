# vim: filetype=perl
# https://libera.chat/guides/certfp
# https://www.oftc.net/NickServ/CertFP/
servers = (
  {
    address = "irc.gitter.im";
    chatnet = "gitter";
    port = "6697";
    password = "9e184da16a69ba773e71914c48060965c1e9f290";
    use_tls = "yes";
    tls_verify = "yes";
    autoconnect = "yes";
  },
  {
    address = "192.99.102.52";
    chatnet = "FRRouting.slack.com";
    port = "6667";
    password = "xoxc-162493688432-2090314984309-2093779171413-ca37c32503d3e6f878a29b26434da3e337ca27f23e9245babb9f64aba72c0391|d=gBhFnyIGQ4C8WJaElyR1Xm9va0QP81%2FfSgdg8qXdwG9%2F8UwLC6lDZX0Fok0s4dPPwesLmtX9a%2BhgmopNNqWBx4nPQBEA4jZhX7cWkJYS1xUy2bMXLeMrZ7O3Q7ZeXxw1G%2Bw4WwflypWLftsnb6kP6kW5gZ5DbnyjKK40PONs2cmgr1opX%2FTsxKkK;";
    use_tls = "yes";
    tls_verify = "no";
    autoconnect = "yes";
  },
  {
    address = "irc.oftc.net";
    chatnet = "OFTC";
    port = "6697";
    use_tls = "yes";
    tls_cert = "~/.irssi/certs/nick.pem";
    tls_verify = "yes";
    autoconnect = "yes";
  },
  {
    address = "192.168.1.109";
    port = "6667";
    chatnet = "bitlbee";
    autoconnect = "yes";
  },
  {
    address = "irc.libera.chat";
    chatnet = "LiberaChat";
    port = "6697";
    use_tls = "yes";
    tls_cert = "~/.irssi/certs/nick.pem";
    tls_verify = "yes";
    autoconnect = "yes";
  },
  {
    address = "irc.rizon.net";
    chatnet = "Rizon";
    port = "6697";
    use_tls = "yes";
    tls_cert = "~/.irssi/certs/nick.pem";
    tls_verify = "yes";
    autoconnect = "yes";
  },
  {
    address = "ssl.ircnet.io";
    chatnet = "IRCNet";
    port = "6697";
    use_tls = "yes";
    tls_cert = "~/.irssi/certs/nick.pem";
    tls_verify = "yes";
    autoconnect = "yes";
  },
  {
    address = "185.112.147.110";
    chatnet = "Undernet-ZNC";
    port = "1025";
    password = "terminaldweller/undernet:gorgoroth";
    use_tls = "yes";
    tls_verify = "no";
    autoconnect = "yes";
  },
  {
    address = "efnet.port80.se";
    chatnet = "EFnet";
    port = "6697";
    use_tls = "yes";
    tls_verify = "no";
    autoconnect = "yes";
  },
  {
    address = "irc.dal.net";
    chatnet = "DALnet";
    port = "6697";
    use_tls = "yes";
    tls_verify = "yes";
    autoconnect = "yes";
  }
);

chatnets = {
  OFTC = {
    type = "IRC";
    nick = "terminaldweller";
    autosendcmd = "/^msg nickserv set cloak on;wait 3000";
    max_kicks = "1";
    max_msgs = "1";
    max_whois = "1";
  };
  gitter = { type = "IRC"; nick = "terminaldweller"; };
  "app.slack.com" = { type = "IRC"; nick = "terminaldweller"; };
  "FRRouting.slack.com" = { type = "IRC"; };
  bitlbee = {
    autosendcmd = "^identify gorgoroth;wait 3000";
    type = "IRC";
  };
  LiberaChat = { type = "IRC"; sasl_mechanism = "EXTERNAL"; };
  Rizon = {
    type = "IRC";
    autosendcmd = "/^mode terminaldweller +px;wait 3000";
  };
  IRCNet = { type = "IRC"; };
  "Undernet-ZNC" = {
    type = "IRC";
    autosendcmd = "/^mode terminaldwel +ix;msg *status traffic;wait 3000";
  };
  EFnet = { type = "IRC"; };
  DALnet = {
    type = "IRC";
    autosendcmd = "/^mode terminaldweller +HCi;msg nickserv@services.dal.net identify Xashmith#666;wait 3000";
  };
};

channels = (
  { name = "#dpdk"; chatnet = "LiberaChat"; autojoin = "yes"; },
  { name = "#fdio-vpp"; chatnet = "LiberaChat"; autojoin = "yes"; },
  { name = "#openssl"; chatnet = "LiberaChat"; autojoin = "yes"; },
  { name = "#qemu"; chatnet = "OFTC"; autojoin = "yes"; },
  { name = "#debian"; chatnet = "OFTC"; autojoin = "yes"; },
  { name = "#virt"; chatnet = "OFTC"; autojoin = "yes"; },
  { name = "#openwrt"; chatnet = "OFTC"; autojoin = "yes"; },
  { name = "#tor"; chatnet = "OFTC"; autojoin = "yes"; },
  { name = "#openssh"; chatnet = "LiberaChat"; autojoin = "yes"; },
  { name = "#gdb"; chatnet = "LiberaChat"; autojoin = "yes"; },
  { name = "#openbsd"; chatnet = "LiberaChat"; autojoin = "yes"; },
  { name = "#voidlinux"; chatnet = "LiberaChat"; autojoin = "yes"; },
  { name = "#security"; chatnet = "LiberaChat"; autojoin = "yes"; },
  { name = "#crypto"; chatnet = "LiberaChat"; autojoin = "yes"; },
  { name = "#tmux"; chatnet = "LiberaChat"; autojoin = "yes"; },
  { name = "#vim"; chatnet = "LiberaChat"; autojoin = "yes"; },
  { name = "#git"; chatnet = "LiberaChat"; autojoin = "yes"; },
  { name = "#neomutt"; chatnet = "LiberaChat"; autojoin = "yes"; },
  { name = "#busybox"; chatnet = "LiberaChat"; autojoin = "yes"; },
  { name = "#shadow"; chatnet = "LiberaChat"; autojoin = "yes"; },
  { name = "#freebsd"; chatnet = "LiberaChat"; autojoin = "yes"; },
  { name = "#linux"; chatnet = "LiberaChat"; autojoin = "yes"; },
  { name = "#irssi"; chatnet = "LiberaChat"; autojoin = "yes"; },
  { name = "#kvm"; chatnet = "LiberaChat"; autojoin = "yes"; }
);

aliases = {
  ATAG = "WINDOW SERVER";
  ADDALLCHANS = "SCRIPT EXEC foreach my \\$channel (Irssi::channels()) { Irssi::command(\"CHANNEL ADD -auto \\$channel->{name} \\$channel->{server}->{tag} \\$channel->{key}\")\\;}";
  B = "BAN";
  BACK = "AWAY";
  BANS = "BAN";
  BYE = "QUIT";
  C = "CLEAR";
  CALC = "EXEC - if command -v bc >/dev/null 2>&1\\; then printf '%s=' '$*'\\; echo '$*' | bc -l\\; else echo bc was not found\\; fi";
  CHAT = "DCC CHAT";
  DATE = "TIME";
  DEHIGHLIGHT = "DEHILIGHT";
  DESCRIBE = "ACTION";
  DHL = "DEHILIGHT";
  EXEMPTLIST = "MODE $C +e";
  EXIT = "QUIT";
  GOTO = "SCROLLBACK GOTO";
  HIGHLIGHT = "HILIGHT";
  HL = "HILIGHT";
  HOST = "USERHOST";
  INVITELIST = "MODE $C +I";
  J = "JOIN";
  K = "KICK";
  KB = "KICKBAN";
  KN = "KNOCKOUT";
  LAST = "LASTLOG";
  LEAVE = "PART";
  M = "MSG";
  MUB = "UNBAN *";
  N = "NAMES";
  NMSG = "^MSG";
  P = "PART";
  Q = "QUERY";
  RESET = "SET -default";
  RUN = "SCRIPT LOAD";
  SAY = "MSG *";
  SB = "SCROLLBACK";
  SBAR = "STATUSBAR";
  SIGNOFF = "QUIT";
  SV = "MSG * Irssi $J ($V) - http://www.irssi.org";
  T = "TOPIC";
  UB = "UNBAN";
  UMODE = "MODE $N";
  UNSET = "SET -clear";
  W = "WHO";
  WC = "WINDOW CLOSE";
  WG = "WINDOW GOTO";
  WJOIN = "JOIN -window";
  WI = "WHOIS";
  WII = "WHOIS $0 $0";
  WL = "WINDOW LIST";
  WN = "WINDOW NEW HIDDEN";
  WQUERY = "QUERY -window";
  WW = "WHOWAS";
};

statusbar = {
  # formats:
  # when using {templates}, the template is shown only if it's argument isn't
  # empty unless no argument is given. for example {sb} is printed always,
  # but {sb $T} is printed only if $T isn't empty.

  items = {
    # start/end text in statusbars
    barstart = "{sbstart}";
    barend = "{sbend}";

    topicbarstart = "{topicsbstart}";
    topicbarend = "{topicsbend}";

    # treated "normally", you could change the time/user name to whatever
    time = "{sb $Z}";
    user = "%z005fff{sb {sbnickmode $[-2]cumode}%k$N %Zeeeeee {sbumode %k$usermode} %Z005fff%0%z005f00{sbaway $A}}%N";

    # treated specially .. window is printed with non-empty windows,
    # window_empty is printed with empty windows
    window = " %Z00af00{sb $tag/{channel $itemname} %C {sbmode $M}} %C%n ";
    window_empty = "{sb {sbservertag $tag}}";
    prompt = "please%z005f87{%k%z005f87%9$c $*%w%k$R%w%k$S%w%k$N%w%k$T %N%Z005f87}%n";
    prompt_empty = "you%z005f87%k%z005f87%9$c $*%w%k$R%w%k$S%w%k$N%w%k$T %N%Z005f87%n";

    topic = " $topic";
    topic_empty = " Irssi v$J - http://www.irssi.org";

    # all of these treated specially, they're only displayed when needed
    # Powerline
    lag = "{sb %0%Zff8700%zff8700%k ⌚ $0 %Zff8700%0%N}";
    act = "{sb %Zeeeeee%0%n%z005fff %F$0%F %N}";
    more = "%c%0%n%6 more ⬇ %c%0%N";

    # vim_mode
    vim_mode_1 = "%z005f5f%Zffffff%z005f5f%k%9 $vim_cmd_mode%N";
    vim_windows_1 = "%Z005f5f%0%z005f5f%k%9 $vim_wins%z005f5f";
  };

  # there's two type of statusbars. root statusbars are either at the top
  # of the screen or at the bottom of the screen. window statusbars are at
  # the top/bottom of each split window in screen.
  default = {
    # the "default statusbar" to be displayed at the bottom of the window.
    # contains all the normal items.
    window = {
      disabled = "no";

      # window, root
      type = "window";
      # top, bottom
      placement = "bottom";
      # number
      position = "1";
      # active, inactive, always
      visible = "active";

      # list of items in statusbar in the display order
      items = {
        barstart = { priority = "100"; };

        user = { };
        window = { };
        window_empty = { };
        mh_sbsplitmode = { };
        lag = { priority = "-1"; };
        more = { priority = "-1"; alignment = "right"; };
        otr = { priority = "100"; alignment = "right"; };
        usercount = { };
        rotator = { alignment = "right"; };
        vim_windows_1 = { alignment = "right"; };
        vim_mode_1 = { priority = "100"; alignment = "right"; };

        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # statusbar to use in inactive split windows
    window_inact = {

      type = "window";
      placement = "bottom";
      position = "1";
      visible = "inactive";

      items = {
        barstart = { priority = "100"; };
        window = { };
        window_empty = { };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # we treat input line as yet another statusbar :) It's possible to
    # add other items before or after the input line item.

    # topicbar
    topic = {

      type = "root";
      placement = "top";
      position = "1";
      visible = "always";

      items = {
        topicbarstart = { priority = "100"; };
        topicbarend = { priority = "100"; alignment = "right"; };
        topic = { };
        topicempty = { };
      };
    };
    sb_timezones = {
      items = {
        barstart = { };
        timezones = { };
        barend = { alignment = "right"; };
      };
    };
    dccstat = { items = { dccstat = { }; }; };
    prompt = {
      items = {
        uberprompt = { priority = "-1"; };
        input = { priority = "10"; };
      };
      position = "100";
    };
    awl_0 = {
      items = {
        barstart = { priority = "100"; };
        awl_0 = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
    awl_1 = {
      items = {
        barstart = { priority = "100"; };
        awl_1 = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
    awl_2 = {
      items = {
        barstart = { priority = "100"; };
        awl_2 = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
    awl_3 = {
      items = {
        barstart = { priority = "100"; };
        awl_3 = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
  };
};
settings = {
  core = {
    real_name = "john doe";
    user_name = "devi";
    nick = "terminaldweller";
    use_proxy = "no";
    proxy_address = "127.0.0.1";
    proxy_port = "9050";
    proxy_string = "CONNECT %s:%d HTTP/1.0\012\012";
    proxy_string_after = "conn %s %d";
    proxy_password = "";
  };
  "fe-common/core" = {
    theme = "solarized-powerline";
    hilight_color = "%Zd75f5f";
    emphasis_italics = "yes";
    emphasis_replace = "yes";
  };
  "fe-text" = { actlist_sort = "refnum"; };
  "perl/core/scripts" = {
    # adv_windowlist.pl
    awl_block = "-20";
    awl_sbar_maxlength = "off";
    awl_hide_empty = "yes";
    awl_mouse = "no";
    awl_viewer = "no";
    awl_maxlines = "0";
    #fancy_abbrev = "head";

    # trackbar.pl
    trackbar_style = "%B";
    title_screen_window = "yes";
    awl_shared_sbar = "OFF";
    # usercount.pl
    usercount_show_halfops = "ON";
    usercount_show_ircops = "ON";
    usercount_show_zero = "ON";
    # timezones
    timezones_divider = " %Zeeeeee%Z008080 ";
    timezones = "GMT:GMT EST:EST CET:CET Tehran:Asia/Tehran Tokyo:Asia/Tokyo Montreal:America/Montreal Pacific:America/Los_Angeles Paris:Europe/Paris";
    # hilite_url
    url_color = "32";
    hilite_url = "32";
    # rotator
    rotator_chars = "%Z005f5f%z005f5f%k..%N  %Z005f5f%z005f5f%koo%N  %Z005f5f%z005f5f%k00%N  %Z005f5f%z005f5f%kOO%N  %Z005f5f%z005f5f%k00%N  %Z005f5f%z005f5f%koo%N";
    rotator_speed = "1000";
    rotator_bounce = "yes";
    rotator_seperator = " ";
    # dccstats
    dccstat_hide_sbar_when_inactive = "no";
    dccstat_cycle_through_transfers = "yes";
    # uberprmpt
    uberprompt_format = "%k%z005f87%9$c $*%w%k$R%w%k$S%w%k$N%w%k$T %N%Z005f87%Z005f5f$uber";
    uberprompt_format_empty = "%k%z005f87%9$c $*%w%k$R%w%k$S%w%k$N%w%k$T %N%Z005f87%Z005f5f$uber";
    # irssi_logger
    il_dbname = "irc";
    il_dbuser = "postgres";
    il_dbpass = "devi";
    # nm2
    neat_shrink = "yes";
    neat_staircase_shrink = "yes";
    neat_custom_modes = "no";
    neat_dynamic = "yes";
    # vim_mode
    start_cmd = "yes";
    vim_mode_start_cmd = "yes";
    vim_mode_max_undo_lines = "100";
  };
  "irc/dcc" = {
    dcc_download_path = "~/.irssi/downloads/";
    dcc_send_replace_space_with_underscore = "yes";
    dcc_timeout = "10min";
    dcc_upload_path = "~/.irssi/uploads/";
    dcc_autorename = "yes";
  };
};
keyboard = (
  { key = "meta-[M"; id = "command"; data = "mouse_xterm"; },
  { key = "meta-p"; id = "change_window"; data = "20"; },
  { key = "meta-a"; id = "change_window"; data = "21"; },
  { key = "meta-s"; id = "change_window"; data = "22"; },
  { key = "meta-d"; id = "change_window"; data = "23"; },
  { key = "meta-f"; id = "change_window"; data = "24"; },
  { key = "meta-g"; id = "change_window"; data = "25"; },
  { key = "meta-h"; id = "change_window"; data = "26"; },
  { key = "meta-j"; id = "change_window"; data = "27"; },
  { key = "meta-k"; id = "change_window"; data = "28"; },
  { key = "meta-l"; id = "change_window"; data = "29"; },
  { key = "meta-;"; id = "change_window"; data = "30"; },
  { key = "meta-z"; id = "change_window"; data = "31"; },
  { key = "meta-x"; id = "change_window"; data = "32"; },
  { key = "meta-c"; id = "change_window"; data = "33"; },
  { key = "meta-v"; id = "change_window"; data = "34"; },
  { key = "meta-b"; id = "change_window"; data = "35"; },
  { key = "meta-n"; id = "change_window"; data = "36"; },
  { key = "meta-m"; id = "change_window"; data = "37"; },
  { key = "meta-,"; id = "change_window"; data = "38"; },
  { key = "meta-."; id = "change_window"; data = "39"; },
  { key = "meta-/"; id = "change_window"; data = "40"; }
);
ignores = (
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#docker" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#voidlinux" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#node.js" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#ansible" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#dpdk" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#fdio-vpp" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#alacritty" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#go-nuts" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#neomutt" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#kvm" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#vagrant" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#openssl" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#crypto" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#tmux" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#vim" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#virt" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#debian" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#openbsd" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#freebsd" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#git" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#voidlinux" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#openwrt" ); },
  { 
    level = "JOINS PARTS QUITS NICKS";
    channels = ( "#debian-next" );
  },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#openssh" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#irssi" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#gdb" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#qemu" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#linux" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#shadow" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#tor" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#security" ); },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#busybox" ); },
  { level = "CTCPS"; },
  { level = "JOINS PARTS QUITS NICKS"; channels = ( "#zsh" ); }
);
Mogs = { };
logs = { };
